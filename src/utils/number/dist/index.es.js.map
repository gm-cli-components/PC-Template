{"version":3,"file":"index.es.js","sources":["../src/lib/ceil.ts","../src/lib/floor.ts","../src/lib/round.ts","../src/lib/toRMB.ts"],"sourcesContent":["/**\n * @module number\n */\n\n/**\n * 指定保留的小数位后，向上舎入金额\n * @param   {Number} value 要格式化的数字\n * @param   {Number} decimals 保留几位小数\n * @param   {String} decPoint 小数点符号\n * @param   {String} thousandsSep 千分位符号\n * @returns {String} 格式化后的数字\n */\nexport const ceil = (\n  value: string,\n  decimals: number,\n  decPoint?: string,\n  thousandsSep?: string\n): string => {\n  const dec = decPoint || '.';\n  const sep = thousandsSep || '';\n  value =\n    typeof value === 'symbol'\n      ? '0'\n      : `${value}`\n          .replace(/\\((?=\\d+)(.*)\\)/, '$1')\n          .replace(/[^0-9+-Ee.]/g, '')\n          .replace(dec, '.');\n  const n = !isFinite(+value) ? 0 : parseFloat(value);\n  const prec = !isFinite(+decimals) ? 0 : Math.round(Math.abs(decimals));\n  const toFixedFix = (_n: number, _prec: number): string => {\n    const k = Math.pow(10, _prec);\n    return (Math.ceil(_n * k) / k).toFixed(_prec);\n  };\n  const base = '' + parseInt(toFixedFix(n || 0, prec), 10);\n  const mod = base.length > 3 ? base.length % 3 : 0;\n  let decimalPlace = toFixedFix(n || 0, prec).split('.')[1] || '';\n  decimalPlace += new Array(prec - decimalPlace.length + 1).join('0');\n  return (\n    (mod ? base.substr(0, mod) + sep : '') +\n    base.substr(mod).replace(/(\\d{3})(?=\\d)/g, '$1' + sep) +\n    (prec ? dec + decimalPlace : '')\n  );\n};\n","/**\n * @module number\n */\n\n/**\n * 指定保留的小数位后，向下舍入金额\n * @param   {Number} value 要格式化的数字\n * @param   {Number} decimals 保留几位小数\n * @param   {String} decPoint 小数点符号\n * @param   {String} thousandsSep 千分位符号\n * @returns {String} 格式化后的数字\n */\nexport const floor = (\n  value: string,\n  decimals: number,\n  decPoint?: string,\n  thousandsSep?: string\n): string => {\n  const sep = thousandsSep || '';\n  const dec = decPoint || '.';\n  value =\n    typeof value === 'symbol'\n      ? '0'\n      : `${value}`\n          .replace(/\\((?=\\d+)(.*)\\)/, '$1')\n          .replace(/[^0-9+-Ee.]/g, '')\n          .replace(dec, '.');\n  const n = !isFinite(+value) ? 0 : +value;\n  const prec = !isFinite(+decimals) ? 0 : Math.round(Math.abs(decimals));\n  // let s: string[];\n  // const toFixedFix = (_n: number, _prec: number): string => {\n  //   const k = Math.pow(10, _prec);\n  //   return '' + Math.floor(_n * k) / k;\n  // };\n\n  // s = (prec ? toFixedFix(n, prec) : '' + Math.floor(n)).split('.');\n  // const re = /(-?\\d+)(\\d{3})/;\n  // while (re.test(s[0])) {\n  //   s[0] = s[0].replace(re, '$1' + sep + '$2');\n  // }\n\n  // if ((s[1] || '').length < prec) {\n  //   s[1] = s[1] || '';\n  //   s[1] += new Array(prec - s[1].length + 1).join('0');\n  // }\n  // return s.join(dec);\n\n  const toFixedFix = (_n: number, _prec: number): string => {\n    const k = Math.pow(10, _prec);\n    return '' + Math.floor(_n * k) / k;\n  };\n  const base = '' + parseInt(toFixedFix(n || 0, prec), 10);\n  const mod = base.length > 3 ? base.length % 3 : 0;\n  let decimalPlace = toFixedFix(n || 0, prec).split('.')[1] || '';\n  decimalPlace += new Array(prec - decimalPlace.length + 1).join('0');\n  // Format the number:\n  return (\n    // negative +\n    (mod ? base.substr(0, mod) + sep : '') +\n    base.substr(mod).replace(/(\\d{3})(?=\\d)/g, '$1' + sep) +\n    (prec ? dec + decimalPlace : '')\n  );\n};\n","/**\n * @module number\n */\n\n/**\n * 指定保留的小数位后，四舍五入金额\n * @param   {Number} value 要格式化的数字\n * @param   {Number} decimals 保留几位小数\n * @param   {String} decPoint 小数点符号\n * @param   {String} thousandsSep 千分位符号\n * @returns {String} 格式化后的数字\n */\nexport const round = (\n  value: string,\n  decimals: number,\n  decPoint?: string,\n  thousandsSep?: string\n): string => {\n  // value = (value + '').replace(/[^0-9+-Ee.]/g, '');\n  // const n = !isFinite(+value) ? 0 : +value;\n  // const prec = !isFinite(+decimals) ? 0 : Math.round(Math.abs(decimals));\n  // const dec = decPoint || '.';\n  // const sep = thousandsSep || '';\n  // let s: string[];\n  // const toFixedFix = (_n: number, _prec: number): string => {\n  //   const k = Math.pow(10, _prec);\n  //   return '' + Math.ceil(_n * k) / k;\n  // };\n  // s = (prec ? toFixedFix(n, prec) : '' + Math.round(n)).split('.');\n  // const re = /(-?\\d+)(\\d{3})/;\n  // while (re.test(s[0])) {\n  //   s[0] = s[0].replace(re, '$1' + sep + '$2');\n  // }\n  // if ((s[1] || '').length < prec) {\n  //   s[1] = s[1] || '';\n  //   s[1] += new Array(prec - s[1].length + 1).join('0');\n  // }\n  // return s.join(dec);\n  const dec = decPoint || '.';\n  const sep = thousandsSep || '';\n  value =\n    typeof value === 'symbol'\n      ? '0'\n      : `${value}`\n          .replace(/\\((?=\\d+)(.*)\\)/, '$1')\n          .replace(/[^0-9+-Ee.]/g, '')\n          .replace(dec, '.');\n  const n = !isFinite(+value) ? 0 : parseFloat(value);\n  const negative = n < 0 ? true : false;\n  const prec = !isFinite(+decimals) ? 0 : Math.round(Math.abs(decimals));\n  const toFixedFix = (_n: number, _prec: number): string => {\n    const k = Math.pow(10, _prec);\n    return (Math.round(_n * k) / k).toFixed(_prec);\n  };\n  const base = '' + parseInt(toFixedFix(Math.abs(n || 0), prec), 10);\n  const mod = base.length > 3 ? base.length % 3 : 0;\n  let decimalPlace = toFixedFix(Math.abs(n || 0), prec).split('.')[1] || '';\n  decimalPlace += new Array(prec - decimalPlace.length + 1).join('0');\n  return (\n    (negative ? '-' : '') +\n    (mod ? base.substr(0, mod) + sep : '') +\n    base.substr(mod).replace(/(\\d{3})(?=\\d)/g, '$1' + sep) +\n    (prec ? dec + decimalPlace : '')\n  );\n};\n","/**\n * @module number\n */\n\n/**\n * 金额转人民币大写\n * @param   {Number} num 要格式化的数字\n * @return  {String} 格式化后的大写人民币\n */\nexport const toRMB = (num: number): string => {\n  if (typeof num !== 'number') {\n    return '无效数值';\n  }\n  let strPrefix = '';\n  if (num < 0) {\n    strPrefix = '(欠)';\n  }\n  num = Math.abs(num);\n  if (num >= 1000000000000) {\n    return '[超出最大数值]';\n  }\n  let strOutput = '';\n  let strUnit = '仟佰拾亿仟佰拾万仟佰拾圆角分';\n  const strCapDgt = '零壹贰叁肆伍陆柒捌玖';\n  let temp: string = num + '';\n  temp += '00';\n  const intPos = temp.indexOf('.');\n  if (intPos >= 0) {\n    temp = temp.substring(0, intPos) + temp.substr(intPos + 1, 2);\n  }\n  strUnit = strUnit.substr(strUnit.length - temp.length);\n  for (let i = 0; i < temp.length; i++) {\n    strOutput +=\n      strCapDgt.substr(Number(temp.substr(i, 1)), 1) + strUnit.substr(i, 1);\n  }\n  return (\n    strPrefix +\n    strOutput\n      .replace(/零角零分$/, '整')\n      .replace(/零[仟佰拾]/g, '零')\n      .replace(/零{2,}/g, '零')\n      .replace(/零([亿|万])/g, '$1')\n      .replace(/零+圆/, '圆')\n      .replace(/亿零{0,3}万/, '亿')\n      .replace(/^圆/, '零圆')\n  );\n};\n"],"names":["ceil","value","decimals","decPoint","thousandsSep","dec","sep","replace","n","isFinite","parseFloat","prec","Math","round","abs","toFixedFix","_n","_prec","k","pow","toFixed","base","parseInt","mod","length","decimalPlace","split","Array","join","substr","floor","negative","toRMB","num","strPrefix","strOutput","strUnit","temp","intPos","indexOf","substring","i","Number"],"mappings":"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"}