{"version":3,"file":"index.umd.js","sources":["../src/lib/capitalize.ts","../src/lib/decapitalize.ts","../src/lib/fromCamelCase.ts","../src/lib/mask.ts","../src/lib/toQs.ts","../src/lib/getURLParameters.ts","../src/lib/getUuid.ts","../src/lib/toCamelCase.ts","../src/lib/toKebabCase.ts","../src/lib/toSnakeCase.ts","../src/lib/truncateString.ts"],"sourcesContent":["/**\n * @module string\n * 字符串工具类\n */\n\n/**\n * 首字母大写\n * @param   {String} str 要格式化的字符串\n * @param   {Boolean} lowerRest 是否仅第一个首字母大写\n * @return  {String} 格式化后的首字母大写字符串\n */\nexport const capitalize = (\n  [first, ...rest]: string,\n  lowerRest: boolean = false\n): string =>\n  first.toUpperCase() +\n  (lowerRest ? rest.join('').toLowerCase() : rest.join(''));\n","/**\n * @module string\n * 字符串工具类\n */\n\n/**\n * 首字母小写\n * @param   {String} str 要格式化的字符串\n * @param   {Boolean} upperRest 是否仅第一个单词首字母小写\n * @return  {String} 格式化后的字符串\n */\nexport const decapitalize = (\n  [first, ...rest]: string,\n  upperRest: boolean = false\n): string =>\n  first.toLowerCase() +\n  (upperRest ? rest.join('').toUpperCase() : rest.join(''));\n","/**\n * @module string\n * 字符串工具类\n */\n\n/**\n * 驼峰转自定义连字符\n * @param   {String} str 要格式化的字符串\n * @param   {String} separator: 自定义连字符\n * @return  {String} 格式化后的字符串\n */\nexport const fromCamelCase = (str: string, separator: string = '_'): string =>\n  str &&\n  str\n    .replace(/([a-z\\d])([A-Z])/g, '$1' + separator + '$2')\n    .replace(/([A-Z]+)([A-Z][a-z\\d]+)/g, '$1' + separator + '$2')\n    .toLowerCase();\n","/**\n * @module string\n * 字符串工具类\n */\n\n/**\n * 使用*遮蔽字符串\n * @param   {String} cc 要格式化的字符串\n * @param   {Number} num 指定替换从字符串开始到末尾的所有项,使用负值从字符串的尾部替换元素\n * @param   {String} character 指定的掩码字符\n * @return  {String} 格式化后的字符串\n */\nexport const mask = (\n  cc: string,\n  num: number = 4,\n  character: string = '*'\n): string => `${cc}`.slice(-num).padStart(`${cc}`.length, character);\n","/**\n * @module string\n * 字符串工具类\n */\n\n/**\n * 对象转字符串\n * @param   {Object} obj 要格式化的对象\n * @return  {String} 格式化后的字符串\n */\nexport const toQs = (obj: object): string => {\n  const str = [];\n  for (const p in obj) {\n    if (obj.hasOwnProperty(p) && obj[p]) {\n      str.push(encodeURIComponent(p) + '=' + encodeURIComponent(obj[p]));\n    }\n  }\n  return str.join('&');\n};\n","/**\n * @module string\n * 字符串工具类\n */\n\n/**\n * 获取URL参数\n * @param   {String} url 要格式化的URL\n * @return  {Object} 格式化后的参数Josn对象\n */\nexport const getURLParameters = (url: string): object =>\n  (url.match(/([^?=&]+)(=([^&]*))/g) || []).reduce(\n    (a, v) => (\n      (a[v.slice(0, v.indexOf('='))] = v.slice(v.indexOf('=') + 1)), a\n    ),\n    {}\n  );\n","/**\n * @module string\n * 字符串工具类\n */\n\n/**\n * Get uuid\n * @return  {String} 格式化后的首字母大写字符串\n */\n\nexport const getUuid = (): string => {\n  let d = new Date().getTime();\n  if (\n    typeof performance !== 'undefined' &&\n    typeof performance.now === 'function'\n  ) {\n    d += performance.now(); // use high-precision timer if available\n  }\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    /* tslint:disable */\n    const r = (d + Math.random() * 16) % 16 | 0;\n    d = Math.floor(d / 16);\n    return (c === 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","/**\n * @module string\n * 字符串工具类\n */\n\n/**\n * 连字符转驼峰\n * @param   {String} str 要格式化的字符串\n * @return  {String} 格式化后的驼峰字符串\n */\nexport const toCamelCase = (str: string): string => {\n  const s =\n    str &&\n    str\n      .match(\n        /[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g\n      )!\n      .map(\n        (x: string) => x.slice(0, 1).toUpperCase() + x.slice(1).toLowerCase()\n      )\n      .join('');\n  return s.slice(0, 1).toLowerCase() + s.slice(1);\n};\n","/**\n * @module string\n * 字符串工具类\n */\n\n/**\n * 字符串转连字符('-')\n * @param   {String} str 要格式化的字符串\n * @return  {String} 格式化后的连字符\n */\nexport const toKebabCase = (str: string): string =>\n  str &&\n  str\n    .match(\n      /[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g\n    )!\n    .map((x: string) => x.toLowerCase())\n    .join('-');\n","/**\n * @module string\n * 字符串工具类\n */\n\n/**\n * 字符串转连字符('_')\n * @param   {String} str 要格式化的字符串\n * @return  {String} 格式化后的连字符\n */\nexport const toSnakeCase = (str: string): string =>\n  str &&\n  str\n    .match(\n      /[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g\n    )!\n    .map((x: string) => x.toLowerCase())\n    .join('_');\n","/**\n * @module string\n * 字符串工具类\n */\n\n/**\n * 省略号显示\n * @param   {String} str 要格式化的字符串\n * @param   {Number} num 规定从何处结束选取\n * @return  {String} 格式化后的字符串\n */\nexport const truncateString = (str: string, num: number): string =>\n  str.length > num ? str.slice(0, num > 3 ? num - 3 : num) + '...' : str;\n"],"names":["_a","lowerRest","_b","first","rest","toUpperCase","join","toLowerCase","upperRest","str","separator","replace","cc","num","character","slice","padStart","length","obj","p","hasOwnProperty","push","encodeURIComponent","url","match","reduce","a","v","indexOf","d","Date","getTime","performance","now","c","r","Math","random","floor","toString","s","map","x"],"mappings":"+dAW0B,SACxBA,EACAC,OADAC,OAACC,OAAOC,aAGR,oBAFAH,MAEAE,EAAME,eACLJ,EAAYG,EAAKE,KAAK,IAAIC,cAAgBH,EAAKE,KAAK,qBCL3B,SAC1BN,EACAQ,OADAN,OAACC,OAAOC,aAGR,oBAFAI,MAEAL,EAAMI,eACLC,EAAYJ,EAAKE,KAAK,IAAID,cAAgBD,EAAKE,KAAK,sBCL1B,SAACG,EAAaC,GACzC,oBADyCA,OACzCD,GACAA,EACGE,QAAQ,oBAAqB,KAAOD,EAAY,MAChDC,QAAQ,2BAA4B,KAAOD,EAAY,MACvDH,sBCJe,SAClBK,EACAC,EACAC,GACW,oBAFXD,kBACAC,QACW,GAAGF,GAAKG,OAAOF,GAAKG,UAAS,GAAGJ,GAAKK,OAAQH,WCNtC,SAACI,GACnB,IAAMT,EAAM,GACZ,IAAK,IAAMU,KAAKD,EACVA,EAAIE,eAAeD,IAAMD,EAAIC,IAC/BV,EAAIY,KAAKC,mBAAmBH,GAAK,IAAMG,mBAAmBJ,EAAIC,KAGlE,OAAOV,EAAIH,KAAK,yBCPc,SAACiB,GAC/B,OAACA,EAAIC,MAAM,yBAA2B,IAAIC,OACxC,SAACC,EAAGC,GAAM,OACPD,EAAEC,EAAEZ,MAAM,EAAGY,EAAEC,QAAQ,OAASD,EAAEZ,MAAMY,EAAEC,QAAQ,KAAO,GAAKF,GAEjE,eCLmB,WACrB,IAAIG,GAAI,IAAIC,MAAOC,UAOnB,MALyB,oBAAhBC,aACoB,mBAApBA,YAAYC,MAEnBJ,GAAKG,YAAYC,OAEZ,uCAAuCtB,QAAQ,QAAS,SAAAuB,GAE7D,IAAMC,GAAKN,EAAoB,GAAhBO,KAAKC,UAAiB,GAAK,EAE1C,OADAR,EAAIO,KAAKE,MAAMT,EAAI,KACL,MAANK,EAAYC,EAAS,EAAJA,EAAW,GAAKI,SAAS,qBCZ3B,SAAC9B,GAC1B,IAAM+B,EACJ/B,GACAA,EACGe,MACC,sEAEDiB,IACC,SAACC,GAAc,OAAAA,EAAE3B,MAAM,EAAG,GAAGV,cAAgBqC,EAAE3B,MAAM,GAAGR,gBAEzDD,KAAK,IACV,OAAOkC,EAAEzB,MAAM,EAAG,GAAGR,cAAgBiC,EAAEzB,MAAM,kBCXpB,SAACN,GAC1B,OAAAA,GACAA,EACGe,MACC,sEAEDiB,IAAI,SAACC,GAAc,OAAAA,EAAEnC,gBACrBD,KAAK,oBCPiB,SAACG,GAC1B,OAAAA,GACAA,EACGe,MACC,sEAEDiB,IAAI,SAACC,GAAc,OAAAA,EAAEnC,gBACrBD,KAAK,uBCNoB,SAACG,EAAaI,GAC1C,OAAAJ,EAAIQ,OAASJ,EAAMJ,EAAIM,MAAM,EAAGF,EAAM,EAAIA,EAAM,EAAIA,GAAO,MAAQJ"}